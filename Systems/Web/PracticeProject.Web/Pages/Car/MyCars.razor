@page "/mycar"
@using PracticeProject.Web.Pages.Car.Services
@using PracticeProject.Web.Cars.Models
@using PracticeProject.Web.Components
@using Microsoft.AspNetCore.Authorization
@using PracticeProject.Web.Pages.Hub

@inject ICarService CarService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject SignalRService signalRService
@inject AppState appState

@attribute [Authorize]
@layout MainLayout

<PageTitle>My cars for sale</PageTitle>

<div class="text-center">
    <MudText Typo="Typo.h4" Class="ma-8">My cars</MudText>
</div>

<MudGrid Justify="Justify.Center" Class="mr-50" >
    <MudItem xs="2" sm="3" Class="mr-50">
        <hr style="height: 15px; border: none; background-color: transparent; margin: 0px 0;" />
        <MudDateRangePicker Label="Start and end date" DateRange="dateRange" DateRangeChanged="@(value => { dateRange = value;})" DateFormat="yyyy-MM-dd" Class="mr-2" />


        <MudTextField T="string" @bind-Value="minPrice" Label="Min price" Class="mr-2"></MudTextField>
        <MudTextField T="string" @bind-Value="maxPrice" Label="Max price" Class="mr-2"></MudTextField>
        <MudTextField T="string" @bind-Value="color" Label="Color" Class="mr-2"></MudTextField>

        <hr style="height: 2px; border: none; background-color: transparent; margin: 5px 0;" />
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Large" OnClick="ApplyFilter">Apply filter</MudButton>
        <hr style="height: 2px; border: none; background-color: transparent; margin: 5px 0;" />
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Size="Size.Large" OnClick="ResetFilter">Clear filter</MudButton>
    </MudItem>
    <MudItem xs="5" sm="9">
        <MudTable Items="@myfilteredCars" Class="ma-2">
    <ColGroup>
        <col style="width:200px;" />
        <col style="width:70px;" />
        <col style="width:110px;" />
        <col />
        <col style="width:60px;" />
        <col style="width:5px;" />
        <col style="width:5px;" />
    </ColGroup>
    <ToolBarContent>
        <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" OnClick="AddCar">Add</MudButton>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search by model" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" OnKeyUp="HandleSearchInput" OnBlur="HandleBlur"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Model</MudTh>
        <MudTh>Year</MudTh>
        <MudTh>Price</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Color</MudTh>
        <MudTh>DatePosted</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Model</MudTd>
        <MudTd>@context.Year</MudTd>
        <MudTd>@context.Price</MudTd>
        <MudTd>@context.Description</MudTd>
        <MudTd>@context.Color</MudTd>
        <MudTd>@context.DatePosted.ToShortDateString()</MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="() => EditCar(context.CarId)"></MudIconButton>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="() => DeleteCar(context.CarId)"></MudIconButton>
        </MudTd>
            </RowTemplate>
        </MudTable>
    </MudItem>
</MudGrid>

@code {
    private DateRange dateRange = new DateRange();
    private string minPrice = "";
    private string maxPrice = "";
    private string color = "";
    private IEnumerable<CarViewModel> allMyCars = new List<CarViewModel>();
    private IEnumerable<CarViewModel> myfilteredCars = new List<CarViewModel>();
    private string searchString = string.Empty;

    private async Task ReloadData()
    {
        allMyCars = await CarService.GetMyCars();
        ApplyFilter();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReloadData();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        appState.OnChange += NeedUpdate;

        if (signalRService.GetStateConnection() != Microsoft.AspNetCore.SignalR.Client.HubConnectionState.Connected)
        {
            await signalRService.StartConnection();
        }
    }

    private async void NeedUpdate()
    {
        await ReloadData();
        StateHasChanged();
    }
    private async Task HandleSearchInput(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            ApplyFilter();
        }
    }

    private void HandleBlur(FocusEventArgs e)
    {
        ApplyFilter();
    }
    private void ApplyFilter()
    {
        myfilteredCars = allMyCars;
        if (!string.IsNullOrEmpty(searchString))
        {
            myfilteredCars = myfilteredCars.Where(c => c.Model.Contains(searchString)).ToList();
        }
        if (dateRange.Start != null)
        {
            myfilteredCars = myfilteredCars.Where(c => c.DatePosted >= dateRange.Start).ToList();
        }
        if (dateRange.End != null)
        {
            myfilteredCars = myfilteredCars.Where(c => c.DatePosted <= dateRange.End).ToList();
        }
        if (!string.IsNullOrEmpty(minPrice))
        {
            decimal minPriceValue;
            if (decimal.TryParse(minPrice, out minPriceValue))
            {
                myfilteredCars = myfilteredCars.Where(c => c.Price >= minPriceValue).ToList();
            }
        }
        if (!string.IsNullOrEmpty(maxPrice))
        {
            decimal maxPriceValue;
            if (decimal.TryParse(maxPrice, out maxPriceValue))
            {
                myfilteredCars = myfilteredCars.Where(c => c.Price <= maxPriceValue).ToList();
            }

        }
        if (!string.IsNullOrEmpty(color))
        {
            myfilteredCars = myfilteredCars.Where(c => c.Color.ToLower().Contains(color.ToLower())).ToList();
        }
    }

    private void ResetFilter()
    {
        dateRange = new DateRange();
        minPrice = "";
        maxPrice = "";
        color = "";
        myfilteredCars = allMyCars;
        ApplyFilter();
    }
    private async Task AddCar()
    {       
        var parameters = new DialogParameters { };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = await DialogService.ShowAsync<CarDialog>("Add car", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        try
        {
            var carModel = ((CarDialog)dialog.Dialog).Model;
            var createModel = new CreateCarViewModel()
                {
                    Model = carModel.Model,
                    SellerId = carModel.SellerId,
                    Year = carModel.Year,
                    Price = carModel.Price,
                    Description = carModel.Description,
                    Color = carModel.Color
                };
            await CarService.AddCar(createModel);            
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            await ReloadData();
        }
    }

    private async Task EditCar(Guid carId)
    {
        var parameters = new DialogParameters();
        parameters.Add("carId", carId);

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        var dialog = DialogService.Show<CarDialog>("Edit car", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var model = ((CarDialog)dialog.Dialog).Model;
        var updateModel = new UpdateCarViewModel()
        {
            Model = model.Model,
            Year = model.Year,
            Price = model.Price,
            Description = model.Description,
            Color = model.Color
        };

        await CarService.EditCar(carId, updateModel);
        await ReloadData();
    }

    private async Task DeleteCar(Guid carId)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete this car?");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Delete car", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        await CarService.DeleteCar(carId);
        await ReloadData();
    }
}
@page "/allcar"
@using PracticeProject.Web.Pages.Car.Services
@using PracticeProject.Web.Cars.Models
@using PracticeProject.Web.Components
@using Microsoft.AspNetCore.Authorization
@using PracticeProject.Web.Pages.Hub

@inject ICarService CarService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject SignalRService signalRService
@inject AppState appState

@attribute [Authorize]
@layout MainLayout

<PageTitle>All cars for sale</PageTitle>

<div class="text-center">
    <MudText Typo="Typo.h4" Class="ma-8">All cars</MudText>
</div>

<MudGrid Justify="Justify.Center" Class="mr-50" >
    <MudItem xs="2" sm="3" Class="mr-50">
        <hr style="height: 15px; border: none; background-color: transparent; margin: 0px 0;" />
        <MudDateRangePicker Label="Start and end date" DateRange="dateRange" DateRangeChanged="@(value => { dateRange = value;})" DateFormat="yyyy-MM-dd" Class="mr-2" />


        <MudTextField T="string" @bind-Value="minPrice" Label="Min price" Class="mr-2"></MudTextField>
        <MudTextField T="string" @bind-Value="maxPrice" Label="Max price" Class="mr-2"></MudTextField>
        <MudTextField T="string" @bind-Value="color" Label="Color" Class="mr-2"></MudTextField>
        <MudTextField T="string" @bind-Value="sellerFullName" Label="Seller full name" Class="mr-2"></MudTextField>

        <hr style="height: 2px; border: none; background-color: transparent; margin: 5px 0;" />
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Large" OnClick="ApplyFilter">Apply filter</MudButton>
        <hr style="height: 2px; border: none; background-color: transparent; margin: 5px 0;" />
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Size="Size.Large" OnClick="ResetFilter">Clear filter</MudButton>
    </MudItem>
    <MudItem xs="5" sm="9">
        <MudTable Items="@filteredCars" Class="ma-2">
            <ColGroup>
                <col style="width:50px;" />  @* Model *@
                <col style="width:70px;" />  @* year *@
                <col style="width:110px;" /> @* price *@
                <col />                      @* description *@
                <col style="width:150px;" />  @* fullname *@
                <col style="width:5px;" />   @* Color *@
                <col style="width:5px;" />   @* DatePosted *@
                <col style="width:5px;" />   @* Button *@
            </ColGroup>
            <ToolBarContent>
                <MudTextField @bind-Value="searchString" Placeholder="Search by model" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" OnKeyUp="HandleSearchInput" OnBlur="HandleBlur"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Model</MudTh>
                <MudTh>Year</MudTh>
                <MudTh>Price</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Seller full name</MudTh>
                <MudTh>Color</MudTh>
                <MudTh>DatePosted</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Model</MudTd>
                <MudTd>@context.Year</MudTd>
                <MudTd>@context.Price</MudTd>
                <MudTd>@context.Description</MudTd>
                <MudTd>@context.SellerFullName</MudTd>
                <MudTd>@context.Color</MudTd>
                <MudTd>@context.DatePosted.ToShortDateString()</MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Visibility" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="() => ApplyFilter()"></MudIconButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudItem>
</MudGrid>

@code {
    private DateRange dateRange = new DateRange();
    private string minPrice = "";
    private string maxPrice = "";
    private string color = "";
    private string sellerFullName = "";
    private IEnumerable<CarViewModel> allCars = new List<CarViewModel>();
    private IEnumerable<CarViewModel> filteredCars = new List<CarViewModel>();
    private string searchString = string.Empty;

    private async Task ReloadData()
    {
        allCars = await CarService.GetAllCars();
        ApplyFilter();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReloadData();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        appState.OnChange += NeedUpdate;

        if (signalRService.GetStateConnection() != Microsoft.AspNetCore.SignalR.Client.HubConnectionState.Connected)
        { 
            await signalRService.StartConnection();
        }        
    }

    private async void NeedUpdate()
    {
        await ReloadData();
        StateHasChanged();
    }

    private async Task HandleSearchInput(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            ApplyFilter();
        }        
    }

    private void HandleBlur(FocusEventArgs e)
    {
        ApplyFilter();
    }
    private void ApplyFilter()
    {
        filteredCars = allCars;
        if (!string.IsNullOrEmpty(searchString))
        {
            filteredCars = filteredCars.Where(c => c.Model.Contains(searchString)).ToList();
        }
        if (dateRange.Start != null)
        {
            filteredCars = filteredCars.Where(c => c.DatePosted >= dateRange.Start).ToList();
        }
        if (dateRange.End != null)
        {
            filteredCars = filteredCars.Where(c => c.DatePosted <= dateRange.End).ToList();
        }
        if (!string.IsNullOrEmpty(minPrice))
        {
            decimal minPriceValue;
            if (decimal.TryParse(minPrice, out minPriceValue))
            {
                filteredCars = filteredCars.Where(c => c.Price >= minPriceValue).ToList();
            }
        }
        if (!string.IsNullOrEmpty(maxPrice))
        {
            decimal maxPriceValue;
            if (decimal.TryParse(maxPrice, out maxPriceValue))
            {
                filteredCars = filteredCars.Where(c => c.Price <= maxPriceValue).ToList();
            }

        }
        if (!string.IsNullOrEmpty(color))
        {
            filteredCars = filteredCars.Where(c => c.Color.ToLower().Contains(color.ToLower())).ToList();
        }
        if (!string.IsNullOrEmpty(sellerFullName))
        {
            filteredCars = filteredCars.Where(c => c.SellerFullName.ToLower().Contains(sellerFullName.ToLower())).ToList();
        }
    }

    private void ResetFilter()
    {
        dateRange = new DateRange();
        minPrice = "";
        maxPrice = "";
        color = "";
        sellerFullName = "";
        filteredCars = allCars;
        ApplyFilter();
    }
   
}